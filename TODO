TODO

- import: what happens if no amount/desc/etc... column is found?
- account (and possibly category) being blank seem to be flagged as imported successfully
- case sensitivity when looking for column headers on import
- concatenate all errors in error export, shows just first
- validate prescence of date, category, account to generate errors
- add text on transaction import describing necessary format
- allow column mapping for transaction import

- "No transactions found"

- Metrics on transaction#index and transaction#filter (collapsable div):
  - opening balance
  - closing balance
  - income
  - spent
  - category breakdown

- padding around fitler/new transaction form
- errors are highlighted under form for new transaction (see http://foundation.zurb.com/docs/components/forms.html error states)
- prefix for amount?

- sort by date :desc
- category order on dropdown: unassigned always first then alpha

- must create account to create transaction

- mass assign account, category, delete (have a bar on bottom that follows, with selected do this:)

- theme datepicker

- datepicker for transaction edit

- AJAX THE LOT!

- none for ignored categroies

% commands

heroku config:add TZ=Europe/London

dashboard
- current overall balance
- balance per account
- categorical spend (default: in the last 30 days, ability to alter time)

move number_to_currency format gunk to a new helper number_to_currency_with_tds
amounts should be Â£ - if 0

optimizing: using inverse of on models with associations?

find_or_create_by for category or account on transaction import, new, and update
auto-complete when typing in categories, accounts and transaction, ordered by popularity
[am|ex cashback |v]
|amex corporate | |  with the idea that you can arrow down and hit enter or tab to populate

styling for accounts and categories as buttons (bootstrap-esque), possible colour varience

search for nil? and replace with blank? or present?

use bullet to help detect n+1 problems

scss custom classes and mixins
bourbon sass

specify desired columns on queries to reduce query load on mem

The data structure on splits will vary, depending on how strict they need to be:
- Should you be able to group transactions with different accounts, i.e. transfers?
  And if so, what then happens if you filter on a particular account?
  This also affects looking up the last account balance, and quickly getting categorical spend
  Could add two columns, is split and parent_transaction

  has_many :children, class_name: "Transaction", foreign_key: "parent_id"
  belongs_to :parent, class_name: "Transaction"

  for indexing transactions:
  if @transaction.children.empty?
    show splits...
  end

  @transaction.parent = params :id